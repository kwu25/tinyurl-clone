{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kelvin\\\\Desktop\\\\tinyurl-clone\\\\client\\\\src\\\\components\\\\RedirectPage.js\",\n    _s = $RefreshSig$();\n\nimport { Redirect, useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RedirectPage = ({\n  fetchUrl\n}) => {\n  _s();\n\n  const [notFound, setNotFound] = useState(false);\n  const {\n    alias\n  } = useParams();\n  useEffect(() => {\n    const getUrl = async () => {\n      const longUrl = await fetchUrl(alias);\n\n      if (longUrl) {\n        console.log(longUrl);\n        window.location.href = longUrl;\n      } else {\n        setNotFound(true);\n      }\n    };\n\n    getUrl();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Alias not found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 10\n  }, this);\n};\n\n_s(RedirectPage, \"W3bbm5joWThO3PVSN47IhIuQnhA=\", false, function () {\n  return [useParams];\n});\n\n_c = RedirectPage;\nexport default RedirectPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"RedirectPage\");","map":{"version":3,"sources":["C:/Users/Kelvin/Desktop/tinyurl-clone/client/src/components/RedirectPage.js"],"names":["Redirect","useParams","useState","useEffect","RedirectPage","fetchUrl","notFound","setNotFound","alias","getUrl","longUrl","console","log","window","location","href"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,kBAApC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACrC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAYP,SAAS,EAA3B;AACAE,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,MAAM,GAAG,YAAY;AACzB,YAAMC,OAAO,GAAG,MAAML,QAAQ,CAACG,KAAD,CAA9B;;AAEA,UAAIE,OAAJ,EAAa;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAG,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuBL,OAAvB;AACD,OAHD,MAGO;AACLH,QAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,KATD;;AAWAE,IAAAA,MAAM;AACP,GAbQ,CAAT;AAcA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAlBD;;GAAML,Y;UAEcH,S;;;KAFdG,Y;AAoBN,eAAeA,YAAf","sourcesContent":["import { Redirect, useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst RedirectPage = ({ fetchUrl }) => {\r\n  const [notFound, setNotFound] = useState(false);\r\n  const { alias } = useParams();\r\n  useEffect(() => {\r\n    const getUrl = async () => {\r\n      const longUrl = await fetchUrl(alias);\r\n\r\n      if (longUrl) {\r\n        console.log(longUrl);\r\n        window.location.href = longUrl;\r\n      } else {\r\n        setNotFound(true);\r\n      }\r\n    };\r\n\r\n    getUrl();\r\n  });\r\n  return <div>Alias not found</div>;\r\n};\r\n\r\nexport default RedirectPage;\r\n"]},"metadata":{},"sourceType":"module"}